1 - Para começar a explorar os comandos que exibem a visualização de alterações no projeto, utilize o comando git log com os seguintes parâmetros:

a) -p para visualizar as alterações em cada arquivo modificado;
b) --oneline para visualizar cada commit de forma resumida em uma única linha;
c) --graph para visualizar a linha do tempo dos commits com suas ramificações;
d) --pretty ou --format para especificar com detalhes o que será exibido.

2 - Na sequência, execute git show para visualizar o trabalho realizado em algum commit específico. Lembre-se que se não for informado algum commit, o último commit será exibido.

3 - Por fim, com git diff, exiba a diferença entre 2 pontos da linha do tempo de nosso repositório. Caso nenhum parâmetro seja passado para o comando, a diferença exibida será entre o último commit e o que ainda não foi adicionado com git add.

Entendemos o problema que branches resolvem ao colaborar com uma equipe em um projeto, organizando a colaboração, evitando conflitos e garantindo que uma funcionalidade seja enviada apenas quando estiver pronta;

Conhecemos os comandos git branch e git switch para manipular as branches existentes;

Vimos como unir o trabalho de duas branches com o comando git merge;

Aprendemos sobre as abordagens de merge commit e fast forward do git merge;

Conseguimos reescrever a história de uma branch utilizando o comando git rebase.

Execute o comando git branch para visualizar que apenas a branch main existe em seu repositório local;
Com o comando git switch -c {nome_da_branch}, crie uma nova branch. Nela você pode adicionar novos commits;
Após adicionar os commits na nova branch, volte para a main com git switch main;
Adicione novos commits na main simulando uma nova funcionalidade que foi mesclada;
Volte para a sua branch criada no Passo 2 e a atualize com git rebase main. Isso aplicará os novos commits da main no início dessa branch;
Volte para a main e mescle o trabalho com o git merge. Se quiser forçar um merge commit, mesmo sendo possível realizar o fast forward, execute git merge --no-ff {nome_da_branch}.

Os comandos pop, drop e apply do git stash possuem semelhanças e diferenças bem importantes, então vamos fazer um pequeno resumo de suas funcionalidades aqui:

Apply
O comando git stash apply espera um índice de um item na stash e o aplica ao repositório, porém, esse comando não remove o item da stash, ou seja, se após executar o comando git stash apply 1 você executar git stash list, o item referente ao índice 1 continuará na stash.

Pop
O git stash pop faz exatamente a mesma coisa que o git stash apply, porém, além de aplicar o item da stash, ele também o remove de lá. Esse comando, sem nenhum parâmetro extra, vai aplicar o último item adicionado à stash, mas nós também podemos informar um índice para ele, como git stash pop 1.

Drop
O git stash drop funciona exatamente como o pop, mas com uma simples diferença: ele apenas remove o item da stash, sem aplicá-lo em nosso repositório. Dessa forma, git stash drop remove o último item adicionado à stash, enquanto o git stash drop 1 remove da stash o item com índice 1.

Salve alterações não adicionadas para commit utilizando o comando git stash;
Utilize o comando git stash list para visualizar os itens adicionados à stash;
Faça uso dos comandos git stash pop e git stash drop para aplicar ou descartar itens da stash;
Com o comando git restore, desfaça as alterações tanto da working tree quanto da staging area;
Utilize o parâmetro --source, do comando git restore, para deixar determinado arquivo no estado específico de um commit que você escolher.
